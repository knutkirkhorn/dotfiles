#!/usr/bin/env bash

function gb() {
	git add package.json
	git add package-lock.json
	git commit -m "Bump dependencies"
}

# Create a directory, navigate into it, initialize npm and open VS Code
function mkdc() {
	# Check if directory already exists
	# Throw an error if it does
	if [ -d "$@" ]; then
		echo "Directory already exists"
		return 1
	fi

	mkdir -p "$@" && cd "$@" && npm init -y && code .
}

# Install npm dependencies and add `@latest` to each dependency
function nil() {
	packages=""

	for package in "$@"; do
		# Remove existing "@latest" if present
		package="${package/@latest/}"

		# Append "@latest" to each package
		package="$package@latest"

		packages="$packages$package "
	done

	# npm i $packages
	echo "TODO: buggy - use 'ncu' CLI instead (bun add -g npm-check-updates)"
}

# Install npm dev dependencies and add `@latest` to each dependency
function nidl() {
	packages=""

	for package in "$@"; do
		# Remove existing "@latest" if present
		package="${package/@latest/}"

		# Append "@latest" to each package
		package="$package@latest"

		packages="$packages$package "
	done

	# npm i -D $packages
	echo "TODO: buggy - use 'ncu' CLI instead (bun add -g npm-check-updates)"
}

function sqlpretty() {
	# Really dumb CLI function that uses the clipboard and removes:
	# - '\n'
	# - '\' in front of '"'
	# The output is saved back to the clipboard

	echo "$(pbpaste | tr -d '\n' | sed 's/\\"/"/g')" | pbcopy
}

function update-shadcn-components() {
	# Check if components/ui directory exists
	if [ ! -d "components/ui" ]; then
		echo "Error: components/ui directory not found"
		return 1
	fi

	# Get all .tsx files in the directory and join them with spaces
	components=$(find components/ui -name "*.tsx" -exec basename {} .tsx \; | tr '\n' ' ' | sed 's/ $//')

	# Check if any components were found
	if [ -z "$components" ]; then
		echo "No .tsx files found in components/ui"
		return 1
	fi

	# Run the shadcn add command with all components
	echo "Updating components: $components"
	eval "npx shadcn@latest add $components --overwrite"

	echo "Updated components"

	# Run ESLint and Prettier on the updated files
	echo "Running ESLint with auto-fix on components/ui..."
	npx eslint --fix "components/ui/**/*.{ts,tsx}"

	echo "Running Prettier on components/ui..."
	npx prettier --write "components/ui/**/*.{ts,tsx}"

	echo "Done! Components updated, linted and formatted."
}

function open-gitlab-pr() {
	# Get the git remote url
	git_remote_url=$(git remote get-url origin)
	# Remove the .git ending of the url
	git_remote_url=$(echo $git_remote_url | sed 's/\.git$//')
	git_branch_name=$(git branch --show-current)

	# Convert the branch name to a title
	# - Remove everything before and including the first "/" in the branch name
	#   => This will for example remove "feature/" from "feature/my-feature"
	# - Replace dashes ("-") with URL encoded spaces ("%20")
	# - Capitalize the first letter at the start
	pr_title=$(echo "$git_branch_name" | sed 's#.*/##; s/-/%20/g' | awk '{print toupper(substr($0,1,1)) substr($0,2)}')

	gitlab_pr_url="$git_remote_url/-/merge_requests/new?merge_request%5Bsource_branch%5D=$git_branch_name&merge_request%5Btitle%5D=$pr_title"
	open $gitlab_pr_url
}
